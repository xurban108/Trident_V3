#####################################################################
#   Macros
#####################################################################

# Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 150   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 150   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 35.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 35.0  ; unretract speed in mm/s
variable_speed_hop        : 15.0  ; z move speed in mm/s
variable_speed_move       : 150.0 ; move speed in mm/s
variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
#                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
# !!! Custom macros, please use with care and review the section of the corresponding macro.
# These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
# Only  single line commands are supported, please create a macro if you need more than one command.
variable_user_pause_macro : ""    ; Everything insight the "" will be executed after the klipper base pause (PAUSE_BASE) function
variable_user_resume_macro: ""    ; Everything insight the "" will be executed before the klipper base resume (RESUME_BASE) function
variable_user_cancel_macro: ""    ; Everything insight the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function
gcode:


###########################################################################################################################
#[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
#gcode:
#    M117 Homing...                 ; display message
#    STATUS_HOMING
#    G28
#    STATUS_LEVELING
#    Z_TILT_ADJUST
#    G28   
#    G0 X150 Y150 Z30 F3600
#    STATUS_READY
#    #--------------------------------------------------------------------
#
#   
#
#[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
#gcode:
#    # safe anti-stringing move coords
#    {% set th = printer.toolhead %}
#    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
#    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
#    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
#    
#    SAVE_GCODE_STATE NAME=STATE_PRINT_END
#
#   M400                           ; wait for buffer to clear
#    G92 E0                         ; zero the extruder
#    G1 E-2.0 F3600                 ; retract filament
#    
#    TURN_OFF_HEATERS
#    STATUS_OFF
#    G90                                      ; absolute positioning
#    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
#    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
#    M107                                     ; turn off fan
    
#    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
 #   RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

#[gcode_macro M141]

#gcode:
 #   SET_TEMPERATURE_FAN_TARGET TEMPERATUE_FAN=exhaust_fan TARGET={params.S}

# Accomplishes the following:
#  -If Z axis has not been homed, it will raise by 10mm and home all
#  -If Z axis has been homed, it will raise by 1mm before any movements
#  -Will grab max positions of X and Y from printer cofig to use for centering nozzle when homing Z
#  -Will store the insitu X and Y currents before changing them to home, and then set them back to what they were when done

#.................................................................................................................
[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    G90
    # Wait just a second… (give StallGuard registers time to clear)
    #G4 P300
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200
    G90
    # Wait just a second… (give StallGuard registers time to clear)
    #G4 P300
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    # Move to centre of bed
    G90
    G1 X150 Y150 F18000
    # Home
    G28 Z
    # Move away
    G91
    G1 Z10
    G90
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[homing_override]
axes: xyz
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
  STATUS_HOMING
  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
  
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}
  STATUS_READY


  
[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
  command: bash -c "bash $HOME/klipper-backup/script.sh"
  timeout: 90.0
  verbose: True

[gcode_macro _HEAT_WAIT]
description: Heating cycle waiting routine
gcode:
    {% set MINUTES = params.MINUTES|default(10)|int %}
    {% set MSG = params.MSG|default("Warming...")|string %}
    {% for i in range(0, MINUTES) %}
        M117 {MSG} {MINUTES-i} minute remaining.
        {% for s in range(0, 60) %}
            _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1
            #SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
            #SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
            G4 P500
            _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1
            #SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
            #SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
            G4 P500
        {% endfor %}
    {% endfor %}

[gcode_macro _WAIT_Variable]
variable_count: 300
variable_duration: 2
variable_waiting: False
# Total wait minutes is (duration * count) / 60 
gcode:

[delayed_gcode WAIT_Delayed]
gcode:
    {% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
    {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
    M117 Pre-Print Heatsoaking... {((duration * count) / 60)|round(1)} minutes left.
    SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count-1}
    {% if count > 0 %} _WAIT_Loop  {% endif %}
    {% if count == 0 %} 
        # FINAL ACION
        SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=False
        M118 Reached the end, do final action
        # FINAL ACION
    {% endif %}

[gcode_macro _WAIT_Loop]
gcode:
    {% set count = printer["gcode_macro _WAIT_Variable"].count|int %}
    {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
    UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}
    {% if  count % 2 == 0 %}
        _set_sb_leds_by_name leds="nozzle" color="standby" transmit=1
        #SET_LED LED=nozzle INDEX=1 RED=.5 GREEN=0 BLUE=0
        #SET_LED LED=nozzle INDEX=2 RED=0 GREEN=0 BLUE=.5
      {% else %}
      _set_sb_leds_by_name leds="nozzle" color="heating" transmit=1
        #SET_LED LED=nozzle INDEX=1 RED=0 GREEN=0 BLUE=.5
        #SET_LED LED=nozzle INDEX=2 RED=.5 GREEN=0 BLUE=0
    {% endif %}

[gcode_macro WAIT_Start]
gcode:
    {% set MINUTES = params.MINUTES|default(15)|int %}
    {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
    {% set count = (MINUTES * 60) / duration %}
    SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
    SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
    UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration}

[gcode_macro WAIT_Quit]
gcode:
    {% if printer["gcode_macro _WAIT_Variable"].waiting %}
        M118 STOPPING LOOP, SETTING COUNT TO 0
        SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE=0
        UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION=1
      {% else %}
        M118 Not in waiting state, nothing to do.
    {% endif %}

[gcode_macro Save_Configuration]

gcode:
    SAVE_CONFIG

[gcode_macro CASELIGHT]
gcode:
  {% set brightness = printer["neopixel Printer_Lights"].color_data[0][1] %}
  {% if brightness == 0 %}
    _CASELIGHT_ON
  {% else %}
    _CASELIGHT_OFF
  {% endif %}

[gcode_macro _CASELIGHT_OFF]
gcode:
  SET_LED LED="Printer_Lights" RED=0 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1

[gcode_macro _CASELIGHT_ON]
gcode:
  SET_LED LED="Printer_Lights" RED=0 GREEN=0.0549 BLUE=0.0706 SYNC=0 TRANSMIT=1 